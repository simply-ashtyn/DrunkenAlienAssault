// "corridor.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "corridor.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _corridor_version_
const char corridor_version[4] = { '0','1','9','d' };
#define _corridor_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _corridor_vertexcount_
const unsigned corridor_vertexcount = 112;
#define _corridor_vertexcount_
#endif
#ifndef _corridor_indexcount_
const unsigned corridor_indexcount = 252;
#define _corridor_indexcount_
#endif
#ifndef _corridor_materialcount_
const unsigned corridor_materialcount = 3; // can be used for batched draws
#define _corridor_materialcount_
#endif
#ifndef _corridor_meshcount_
const unsigned corridor_meshcount = 3;
#define _corridor_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _corridor_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT corridor_vertices[112] =
{
	{	{ 0.500000f, 0.800000f, -0.500000f },	{ -19.685040f, -30.496059f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.800000f, 0.500000f },	{ 19.685040f, -30.496059f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.400000f, 0.500000f },	{ 19.685040f, -14.748030f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.400000f, -0.500000f },	{ -19.685040f, -14.748030f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.200000f, -0.500000f },	{ 19.685040f, -6.874016f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.500000f, 0.100000f, -0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.400000f, 0.100000f, -0.500000f },	{ 15.748030f, -2.937008f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.400000f, 0.758579f, -0.500000f },	{ 15.748030f, -28.865299f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.500000f, 0.400000f, -0.500000f },	{ 19.685040f, -14.748030f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.500000f, 0.800000f, -0.500000f },	{ 19.685040f, -30.496059f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.258579f, 0.900000f, -0.500000f },	{ 10.180260f, -34.433071f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.300000f, 1.000000f, -0.500000f },	{ 11.811020f, -38.370079f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.300000f, 1.000000f, -0.500000f },	{ -11.811020f, -38.370079f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.258579f, 0.900000f, -0.500000f },	{ -10.180260f, -34.433071f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.800000f, -0.500000f },	{ -19.685040f, -30.496059f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.400000f, 0.758579f, -0.500000f },	{ -15.748030f, -28.865299f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.400000f, -0.500000f },	{ -19.685040f, -14.748030f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.200000f, -0.500000f },	{ -19.685040f, -6.874016f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.400000f, 0.100000f, -0.500000f },	{ -15.748030f, -2.937008f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.100000f, -0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.200000f, 1.000000f, -0.500000f },	{ 7.874015f, -38.370079f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.200000f, 1.000000f, -0.500000f },	{ -7.874017f, -38.370079f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.400000f, -0.500000f },	{ 19.685040f, -14.748030f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.400000f, 0.500000f },	{ -19.685040f, -14.748030f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.800000f, 0.500000f },	{ -19.685040f, -30.496059f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.800000f, -0.500000f },	{ 19.685040f, -30.496059f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.100000f, -0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.100000f, 0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.200000f, 0.500000f },	{ -19.685040f, -6.874016f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.200000f, -0.500000f },	{ 19.685040f, -6.874016f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.200000f, -0.500000f },	{ -19.685040f, -6.874016f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.200000f, 0.500000f },	{ 19.685040f, -6.874016f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.100000f, 0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.100000f, -0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.200000f, 1.000000f, 0.500000f },	{ 7.874017f, 20.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.200000f, 1.000000f, 0.500000f },	{ -7.874015f, 20.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.200000f, 1.000000f, -0.500000f },	{ -7.874015f, -18.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.200000f, 1.000000f, -0.500000f },	{ 7.874017f, -18.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.200000f, 0.500000f },	{ 19.685040f, -6.874016f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 0.100000f, 0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.400000f, 0.100000f, 0.500000f },	{ 15.748030f, -2.937008f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.400000f, 0.758579f, 0.500000f },	{ 15.748030f, -28.865299f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 0.400000f, 0.500000f },	{ 19.685040f, -14.748030f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 0.800000f, 0.500000f },	{ 19.685040f, -30.496059f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.258579f, 0.900000f, 0.500000f },	{ 10.180260f, -34.433071f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.300000f, 1.000000f, 0.500000f },	{ 11.811020f, -38.370079f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.258579f, 0.900000f, 0.500000f },	{ -10.180260f, -34.433071f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.300000f, 1.000000f, 0.500000f },	{ -11.811020f, -38.370079f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.500000f, 0.800000f, 0.500000f },	{ -19.685040f, -30.496059f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.400000f, 0.758579f, 0.500000f },	{ -15.748030f, -28.865299f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.500000f, 0.400000f, 0.500000f },	{ -19.685040f, -14.748030f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.500000f, 0.200000f, 0.500000f },	{ -19.685040f, -6.874016f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.400000f, 0.100000f, 0.500000f },	{ -15.748030f, -2.937008f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.500000f, 0.100000f, 0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.200000f, 1.000000f, 0.500000f },	{ 7.874017f, -38.370079f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.200000f, 1.000000f, 0.500000f },	{ -7.874015f, -38.370079f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.400000f, 0.000000f, -0.500000f },	{ 15.748030f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.000000f, -0.500000f },	{ 19.685040f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.000000f, 0.500000f },	{ 19.685040f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.000000f, 0.500000f },	{ 15.748030f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, -0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, 0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.300000f, 1.000000f, 0.500000f },	{ 11.811020f, 20.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.300000f, 1.000000f, -0.500000f },	{ 11.811020f, -18.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.800000f, -0.500000f },	{ 19.685040f, -7.351655f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -0.500000f, 0.800000f, 0.500000f },	{ -19.685040f, -7.351655f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -0.300000f, 1.000000f, 0.500000f },	{ -19.685040f, -18.487190f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -0.300000f, 1.000000f, -0.500000f },	{ 19.685040f, -18.487190f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ 0.300000f, 1.000000f, -0.500000f },	{ -19.685040f, -18.487190f, 0.000000f },	{ 0.707100f, 0.707100f, -0.000000f }	},
	{	{ 0.300000f, 1.000000f, 0.500000f },	{ 19.685040f, -18.487190f, 0.000000f },	{ 0.707100f, 0.707100f, -0.000000f }	},
	{	{ 0.500000f, 0.800000f, 0.500000f },	{ 19.685040f, -7.351655f, 0.000000f },	{ 0.707100f, 0.707100f, -0.000000f }	},
	{	{ 0.500000f, 0.800000f, -0.500000f },	{ -19.685040f, -7.351655f, 0.000000f },	{ 0.707100f, 0.707100f, -0.000000f }	},
	{	{ 0.500000f, 0.000000f, 0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.500000f, 0.000000f, -0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, 0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.400000f, 0.000000f, 0.500000f },	{ 15.748030f, 1.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.300000f, 1.000000f, 0.500000f },	{ -11.811020f, 20.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.300000f, 1.000000f, -0.500000f },	{ -11.811020f, -18.685040f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.758579f, -0.500000f },	{ -19.685040f, -28.865299f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.758579f, 0.500000f },	{ 19.685040f, -28.865299f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.100000f, 0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.000000f, 0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.100000f, -0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.000000f, -0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.100000f, 0.500000f },	{ -19.685040f, -2.937008f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.758579f, 0.500000f },	{ -19.685040f, -28.865299f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.758579f, -0.500000f },	{ 19.685040f, -28.865299f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.000000f, 0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.100000f, -0.500000f },	{ 19.685040f, -2.937008f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.000000f, -0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.400000f, 0.758579f, 0.500000f },	{ -19.685040f, -8.982416f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ 0.258579f, 0.900000f, 0.500000f },	{ -19.685040f, -16.856430f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ 0.258579f, 0.900000f, -0.500000f },	{ 19.685040f, -16.856430f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ 0.400000f, 0.758579f, -0.500000f },	{ 19.685040f, -8.982417f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ -0.258579f, 0.900000f, -0.500000f },	{ -10.180260f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.258579f, 0.900000f, -0.500000f },	{ 10.180260f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.258579f, 0.900000f, 0.500000f },	{ 10.180260f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.258579f, 0.900000f, 0.500000f },	{ -10.180260f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.258579f, 0.900000f, 0.500000f },	{ 19.685040f, -16.856430f, 0.000000f },	{ 0.707100f, -0.707100f, -0.000000f }	},
	{	{ -0.400000f, 0.758579f, 0.500000f },	{ 19.685040f, -8.982416f, 0.000000f },	{ 0.707100f, -0.707100f, -0.000000f }	},
	{	{ -0.400000f, 0.758579f, -0.500000f },	{ -19.685040f, -8.982417f, 0.000000f },	{ 0.707100f, -0.707100f, -0.000000f }	},
	{	{ -0.258579f, 0.900000f, -0.500000f },	{ -19.685040f, -16.856430f, 0.000000f },	{ 0.707100f, -0.707100f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, -0.500000f },	{ -19.685040f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.000000f, -0.500000f },	{ -15.748030f, -18.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.000000f, 0.500000f },	{ -15.748030f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, 0.500000f },	{ -19.685040f, 20.685040f, 0.000000f },	{ -0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.400000f, 0.000000f, -0.500000f },	{ -15.748030f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.000000f, -0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.500000f, 0.000000f, -0.500000f },	{ 19.685040f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.400000f, 0.000000f, -0.500000f },	{ 15.748030f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.400000f, 0.000000f, 0.500000f },	{ -15.748030f, 1.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.500000f, 0.000000f, 0.500000f },	{ -19.685040f, 1.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
};
#define _corridor_vertices_
#endif
#ifndef _corridor_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int corridor_indices[252] =
{
	 0, 1, 2,
	 2, 3, 0,
	 4, 5, 6,
	 6, 7, 4,
	 7, 8, 4,
	 7, 9, 8,
	 7, 10, 9,
	 10, 11, 9,
	 12, 11, 10,
	 12, 10, 13,
	 14, 12, 13,
	 14, 13, 15,
	 16, 14, 15,
	 17, 16, 15,
	 17, 15, 18,
	 18, 19, 17,
	 12, 20, 11,
	 12, 21, 20,
	 22, 23, 24,
	 24, 25, 22,
	 26, 27, 28,
	 28, 29, 26,
	 30, 31, 32,
	 32, 33, 30,
	 34, 35, 36,
	 36, 37, 34,
	 38, 39, 40,
	 40, 41, 38,
	 41, 42, 38,
	 41, 43, 42,
	 41, 44, 43,
	 44, 45, 43,
	 44, 46, 45,
	 47, 45, 46,
	 48, 47, 46,
	 48, 46, 49,
	 50, 48, 49,
	 51, 50, 49,
	 51, 49, 52,
	 52, 53, 51,
	 47, 54, 45,
	 47, 55, 54,
	 56, 57, 58,
	 58, 59, 56,
	 60, 61, 27,
	 27, 26, 60,
	 62, 34, 37,
	 37, 63, 62,
	 64, 65, 66,
	 66, 67, 64,
	 68, 69, 70,
	 70, 71, 68,
	 33, 32, 72,
	 72, 73, 33,
	 39, 74, 75,
	 75, 40, 39,
	 35, 76, 77,
	 77, 36, 35,
	 78, 79, 80,
	 80, 81, 78,
	 81, 82, 78,
	 81, 83, 82,
	 84, 85, 86,
	 86, 87, 84,
	 86, 88, 87,
	 88, 89, 87,
	 90, 91, 92,
	 92, 93, 90,
	 94, 95, 96,
	 96, 97, 94,
	 98, 99, 100,
	 100, 101, 98,
	 102, 103, 104,
	 104, 105, 102,
	 106, 107, 19,
	 19, 18, 106,
	 5, 108, 109,
	 109, 6, 5,
	 110, 111, 53,
	 53, 52, 110,
	 29, 28, 23,
	 23, 22, 29,
	 3, 2, 31,
	 31, 30, 3,
};
#define _corridor_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _corridor_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL corridor_materials[3] =
{
	{
		{{ 0.208637f, 0.219526f, 0.238398f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"metal.004",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.208637f, 0.219526f, 0.238398f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"metalDark.004",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.000000f, 0.822852f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"metalRed.004",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _corridor_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _corridor_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int corridor_batches[3][2] =
{
	{ 126, 0 },
	{ 114, 126 },
	{ 12, 240 },
};
#define _corridor_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _corridor_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH corridor_meshes[3] =
{
	{
		"default",
		126,
		0,
		0,
	},
	{
		"default",
		114,
		126,
		1,
	},
	{
		"default",
		12,
		240,
		2,
	},
};
#define _corridor_meshes_
#endif
